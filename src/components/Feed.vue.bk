<style>
  input[type="file"]{
    position: absolute;
    top: -500px;
  }

  div.file-listing{
    width: 200px;
  }
  div.file-listing img{
    max-width: 90%;
  }
  span.remove-file{
    color: red;
    cursor: pointer;
    float: right;
  }
</style>
<template>
  <v-container fluid>
<v-layout justify-center align-center>
  <v-flex xs10>
    <v-container grid-list-md text-xs>
      <v-layout row wrap>
        <v-flex
          v-bind="{ [`xs${post.flex}`]: true }"
          v-for="post in posts"
          :key="post.title"
        >
          <v-card>
            <v-toolbar flat card color='white'>
              <v-list two-line subheader>
                <v-list-tile :to="'/profile/' + post.email">
                  <v-list-tile-content>
                    <v-list-tile-title>
                      {{ post.name }}
                    </v-list-tile-title>
                    <v-list-tile-sub-title>{{ postDate(post.created_date) }}</v-list-tile-sub-title>
                  </v-list-tile-content>
                </v-list-tile>
              </v-list>
              <v-spacer></v-spacer>
              <v-icon>more_vert</v-icon>
            </v-toolbar>
            <v-container grid-list-lg>
              <v-layout row>
                <v-flex lg12>
                  <div v-html="post.body" style="padding-left: 10px"></div>
                </v-flex>
              </v-layout>
              <v-layout row wrap>
                <v-flex lg12>
                  <div v-if="post.images.length === 1">
                    <img :src="post.images[0]" style="max-width: 100%;" @click.stop="zoomImage(post.images[0])" />
                  </div>
                  <div v-else-if="post.images.length > 1">
                    <v-carousel :cycle=false>
                      <v-carousel-item v-for="(item,i) in post.images" :key="i">
                        <img :src="item" style="max-width: 100%;">
                      </v-carousel-item>
                    </v-carousel>
                  </div>
                </v-flex>
              </v-layout>
              <v-layout wrap>
                <v-flex lg12>
                  <v-card
                    v-for="comment in post.comments"
                    :key="comment.id"
                    style="border: 1px solid black;"
                    color="grey lighten-5"
                  >
                    <v-card-text>
                    <v-chip color="white">
                    <v-avatar size="20px">
                      <v-icon>account_circle</v-icon>
                    </v-avatar>
                    <b>
                      <v-btn
                        flat
                        round
                        :to="'/profile/' + comment.email"
                      >
                        {{ comment.userName }}
                      </v-btn>
                    </b>
                    &nbsp; {{ comment.comment }}
                    </v-chip>
                    <br>
                    <p style="font-family:subheading;">{{ postDate(comment.created_date) }}</p>
                    </v-card-text>
                  </v-card>
                </v-flex>
              </v-layout>
              <v-layout row wrap>
                <v-flex>
                <form @submit.prevent="postComment(post.id)" :ref="'newCommentForm_' + post.id" :id="'newCommentForm_' + post.id">
                  <v-container grid-list-lg>
                    <v-layout row wrap>
                      <v-flex align-content-center=true lg1>
                        <br>
                        <v-avatar size="20px">
                          <v-icon>account_circle</v-icon>
                        </v-avatar>
                      </v-flex>
                      <v-flex md11>
                        <v-text-field
                          :name="'newComment_' + post.id"
                          label="Add a comment"
                          :id="'newComment_' + post.id"
                          rows=1
                          auto-grow
                          v-model="post.newComment"
                        ></v-text-field>
                      </v-flex>
                    </v-layout>
                  </v-container>
                </form>
                </v-flex>
              </v-layout>
            </v-container>
            <v-card-actions>

            </v-card-actions>
          </v-card>
        </v-flex>
      </v-layout>
    </v-container>
  </v-flex>
</v-layout>
    <v-btn
      fab
      bottom
      right
      color="pink"
      dark
      fixed
      @click.stop="dialog = !dialog"
    >
      <v-icon>add</v-icon>
    </v-btn>

    <v-dialog v-model="showZoomImage" width="800px" @click.stop="closeZoomImage">
      <v-card>
        <v-img :src="zoomImageUrl">
        </v-img>
        <img :src="zoomImageUrl" width="790px" />
      </v-card>
    </v-dialog>

    <v-dialog v-model="dialog" width="800px">
      <v-card>
        <form @submit.prevent="postPost" ref="newPost">
        <v-toolbar>
          <v-toolbar-title>
            New Post
          </v-toolbar-title>
          <v-spacer></v-spacer>
          <v-btn icon href="/help/newPost" target="_blank">
            <v-icon>help</v-icon>
          </v-btn>
        </v-toolbar>
        <v-container grid-list-sm class="pa-4">
          <v-layout row wrap>
            <v-flex xs2>
             <v-subheader>
               <v-avatar size="32px" tile>
                 <v-icon>account_circle</v-icon>
               </v-avatar>
             </v-subheader>
            </v-flex>
            <v-flex xs10>
              <v-textarea
                name="input-1"
                label="Say something"
                id="testing"
                multi-line
                v-model="postData"
              ></v-textarea>
            </v-flex>
            <v-flex xs12 align-center justify-space-between>
                <vue-dropzone id="files" :options="dropzoneOptions">
              </vue-dropzone>
            </v-flex>
          </v-layout>
        </v-container>
        <v-card-actions>
          <v-select
            :items='["friends", "followers", "public"]'
            v-model="newVisibility"
            label="Visibility"
            single-line
            hint="Visibility"
            persistent-hint
          ></v-select>
          <v-spacer></v-spacer>
          <v-btn flat color="primary" @click="canclePost">Cancel</v-btn>
          <v-btn color="primary" type="submit" :disabled="this.$store.state.loading">Post</v-btn>
        </v-card-actions>
        </form>
      </v-card>
    </v-dialog>

  </v-container>

</template>

<script>
import axios from 'axios'
import firebase from 'firebase'
import moment from 'moment'
import vue2Dropzone from 'vue2-dropzone'
import 'vue2-dropzone/dist/vue2Dropzone.min.css'

var storageRef = firebase.storage().ref()

export default {
  components: {
    vueDropzone: vue2Dropzone
  },
  data: () => ({
    posts: [],
    newVisibility: 'friends',
    postData: '',
    selectedFile: null,
    dialog: false,
    imagesUrl: [],
    images: [],
    imagePaths: [],
    commentImages: [],
    commentImagePaths: [],
    zoomImageUrl: '',
    showZoomImage: false
  }),
  computed: {
    dropzoneOptions: {
      url: 'http://localhost:5001/v1/files',
      thumbnailWidth: 200,
      addRemoveLinks: true,
      dictDefaultMessage: "<i class='fa fa-cloud-upload'></i>UPLOAD ME"
    }
  },
  methods: {
    vfileAdded (file) {
      console.log('vfileAdded')
      // window.toastr.info('', 'Event : vdropzone-file-added')
    },
    vfilesAdded (file) {
      console.log('vfilesAdded')
      // window.toastr.info('', 'Event : vdropzone-files-added')
    },
    verror (file) {
      console.log('verror')
      // window.toastr.error(file.upload.filename, 'Event : vdropzone-error - ' + file.status)
    },
    postDate (utcdate) {
      return moment.unix(utcdate).fromNow()
    },
    getImg (path) {
      var storage = firebase.storage()
      storage.ref(path).getDownloadURL().then(function (url) {
        console.log(url)
        return url
        // axios.get(url).then(function (response) {
        // console.log(url)
        // return response.data
        // })
      })
    },
    handleFileUploads (e) {
      let uploadedFiles = this.$refs.files.files
      for (var i = 0; i < uploadedFiles.length; i++) {
        let reader = new FileReader()
        reader.onload = () => {
          this.imagesUrl.push({image: reader.result, name: reader.fileName})
        }
        reader.fileName = uploadedFiles[i].name
        reader.readAsDataURL(uploadedFiles[i])
        this.images.push({image: uploadedFiles[i], name: uploadedFiles[i].name})
      }
    },
    addFiles () {
      this.$refs.files.click()
    },
    removeFile (key) {
      this.images.splice(key, 1)
    },
    canclePost () {
      this.postData = null
      this.dialog = false
      this.images = []
      this.imagesUrl = []
      this.imagePaths = []
    },
    postPost () {
      function doPost (vm, count) {
        console.log('starting doPost')
        var auth = {
          headers: {'Content-Type': 'application/json', 'Authorization': vm.$store.state.token}
        }
        console.log(vm.imagePaths)
        axios.post(process.env.API_SERVER + 'posts', { 'post': vm.postData, 'images': vm.imagePaths, 'visibility': vm.newVisibility }, auth)
          .then(response => {
            vm.posts.unshift(response.data)
            vm.newVisibility = 'friends'
            vm.postData = null
            vm.dialog = false
            vm.images = []
            vm.imagesUrl = []
            vm.imagePaths = []
          })
          .catch(function (error) {
            if (error.response.data.status === 'expired' && count < 3) {
              count++
              vm.$store.dispatch('refreshToken')
              setTimeout(doPost(count), 1000)
            } else if (error.response.status >= 400 && count < 3) {
              count++
              setTimeout(doPost(count), 1000)
            } else {
              console.log(error)
              vm.postData = null
              vm.dialog = false
              vm.images = []
              vm.imagesUrl = []
              vm.imagePaths = []
            }
          })
      }

      var count = 0
      if (this.images.length > 0) {
        var postDate = Date.now()
        const uploads = this.images.map(uploadedImage => {
          const storageRef2 = firebase.storage().ref(this.$store.state.user.uid + '/' + postDate + '/' + uploadedImage.name)
          const uploadTask = storageRef2.put(uploadedImage.image)
          uploadTask.on('state_changed', snapshot => {
            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100
            console.log(progress)
          })

          return uploadTask.then(snapshot => {
            this.imagePaths.push(snapshot.downloadURL)
          })
        })

        Promise.all(uploads).then(() => {
          doPost(this, count)
        })
      } else {
        doPost(this, count)
      }
    },
    postComment (id) {
      var thisPostID = parseInt(id)
      var elementPos = this.posts.findIndex(p => p.id === thisPostID)

      function doPost (vm, count) {
        var auth = {
          headers: {'Content-Type': 'application/json', 'Authorization': vm.$store.state.token}
        }

        axios.post(process.env.API_SERVER + 'comments',
          { 'comment': vm.posts[elementPos].newComment,
            'images': vm.commentImagePaths,
            'post_id': thisPostID
          }, auth)
          .then(response => {
            console.log('did the comment post')
            vm.commentImagePaths = []
            vm.posts[elementPos].newComment = ''
            console.log(response.data)
            vm.posts[elementPos].comments.push(response.data)
          })
          .catch(function (error) {
            if (error.response.data.status === 'expired' && count < 3) {
              count++
              vm.$store.dispatch('refreshToken')
              setTimeout(doPost(count), 1000)
            } else if (error.response.status >= 400 && count < 3) {
              count++
              setTimeout(doPost(count), 1000)
            } else {
              console.log(error)
              vm.posts[elementPos].newComment = ''
              // add cleanup here
            }
          })
      }
      function doImageUpload (vm) {
        var postDate = Date.now()
        for (var id in vm.commentImages) {
          var thisPath = vm.$store.state.user.uid + '/' + postDate + '/' + vm.commentImages[id].name
          var uploadTask = storageRef.child(thisPath).put(vm.commentImages[id].image)
          uploadTask.on('state_changed', function (snapshot) {
            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100
            console.log('Upload is ' + progress + '% done')
          }, function (error) {
            console.log(error)
          }, function () {
            var downloadURL = uploadTask.snapshot.downloadURL
            console.log(downloadURL)
            vm.commentImagePaths.push(downloadURL)
            var count = 0
            doPost(vm, count)
          })
        }
      }
      let vm = this
      if (vm.commentImages.length > 0) {
        doImageUpload(vm)
      } else {
        var count = 0
        doPost(vm, count)
      }
    },
    uploadFile () {
      this.$refs.uploadFileInput.click()
    },
    bottomVisible () {
      const scrollY = window.scrollY
      const visible = document.documentElement.clientHeight
      const pageHeight = document.documentElement.scrollHeight
      const bottomOfPage = visible + scrollY >= pageHeight
      return bottomOfPage || pageHeight < visible
    },
    addPosts () {
      console.log('adding posts')
      let vm = this
      var auth = {
        headers: {'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': vm.$store.state.token}
      }
      var endTime = this.posts[this.posts.length - 1].created_date
      axios.get(process.env.API_SERVER + 'feed?endTime=' + endTime, auth)
        .then(response => {
          console.log(response.data.posts)
          for (var i = 0; i < response.data.posts.length; i++) {
            var incomingPosts = response.data.posts[i]
            incomingPosts.changed = false
            incomingPosts.newComment = ''
            vm.posts.splice(vm.posts.length, 0, incomingPosts)
          }
        })
        .catch(function (error) {
          console.log(error)
        })
    },
    zoomImage (url) {
      console.log(url)
      this.zoomImageUrl = url
      this.showZoomImage = true
    },
    closeZoomImage () {
      this.zoomImageUrl = ''
      this.showZoomImage = false
    },
    autoRefreshToken () {
      let vm = this
      vm.$store.dispatch('refreshToken')
    },
    scroll () {
      window.onscroll = () => {
        let bottomOfWindow = document.documentElement.scrollTop + window.innerHeight === document.documentElement.offsetHeight

        if (bottomOfWindow) {
          this.addPosts()
        }
      }
    }
  },
  mounted () {
    this.scroll()
    setTimeout(function () { this.autoRefreshToken() }, 300000)
  },
  created () {
    console.log('running Created')
    // this.autoRefreshToken()
  },
  beforeCreate () {
    console.log('running beforeCreated')
    function getFeed (vm, count) {
      var auth = {
        headers: {'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': vm.$store.state.token}
      }
      axios.get(process.env.API_SERVER + 'feed', auth)
        .then(response => {
          var incomingPosts = response.data.posts
          for (var i = 0; i < incomingPosts.length; i++) {
            incomingPosts[i].changed = false
            incomingPosts[i].newComment = ''
          }
          vm.posts = incomingPosts
        })
        .catch(function (error) {
          if (error.response.data.status === 'expired' && count < 3) {
            count++
            vm.$store.dispatch('refreshToken')
            setTimeout(getFeed(vm, count), 1000)
          } else if (error.response.status >= 400 && count < 3) {
            count++
            setTimeout(getFeed(vm, count), 1000)
          } else {
            console.log(error)
            vm.dialog = false
          }
        })
    }
    let vm = this
    var count = 0
    getFeed(vm, count)
  }
}
</script>
